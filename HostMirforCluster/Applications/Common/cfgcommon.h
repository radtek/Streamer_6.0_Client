#ifndef _CFG_COMMON_H_
#define _CFG_COMMON_H_

#include "lun.h"
#include "OsnWwn.h"
#include "osndefs.h"
#include "ConstDefs.h"

#define				MAX_DEVICE_NAME_LENGTH					128
#ifndef OSN_MAX_HOSTNAME
# define OSN_MAX_HOSTNAME 32
#endif

#ifndef BLOCK_SIZE
#define BLOCK_SIZE 512
#endif

typedef enum _ISCSI_PORT_STATE
{
	PORT_STATE_LOGIN,
	PORT_STATE_CONNECTED,
	PORT_STATE_DOWN
} ISCSI_PORT_STATE, *PISCSI_PORT_STATE;


typedef enum _ISCSI_PORT_MODE
{
	PORT_INITIATOR,
	PORT_TARGET,
	PORT_INIT_TARGET
}ISCSI_PORT_MODE;


typedef struct _OSN_ISCSI_PORT_INFO
{
	ISCSI_PORT_STATE	m_State;
	ISCSI_PORT_MODE		m_Mode;
	OSNWWN				m_WWN;
	ULONG				m_IPAddress;
	WCHAR				m_IQN[MAX_DEVICE_NAME_LENGTH];
	WCHAR				m_Alias[MAX_DEVICE_NAME_LENGTH];
	WCHAR				m_MacAddress[MAC_8022_ADDRESS_SIZE_IN_STRING];
} OSN_ISCSI_PORT_INFO, *POSN_ISCSI_PORT_INFO;

typedef struct _OSN_ISCSI_PORT_LIST
{
	unsigned int		m_Size;
	OSN_ISCSI_PORT_INFO	m_PortInfo[1];
} OSN_ISCSI_PORT_LIST, *POSN_ISCSI_PORT_LIST;



typedef struct	_PORT_SESSION
{
	OSNWWN		m_InitiatorPort;
	OSNWWN		m_TargetPort;
	USHORT			m_TargetPortIndex;
} PORT_SESSION, *PPORT_SESSION;


typedef struct	_LUN_DESCRIPTOR
{
	PORT_SESSION	m_PortSession;
	OSNLUN			m_Lun;				//OSNLUN defined in lun.h
} LUN_DESCRIPTOR, *PLUN_DESCRIPTOR;


typedef struct	_VOLUME_INFO
{
	WCHAR				m_VolumeName[MAX_DEVICE_NAME_LENGTH];
	ULONGLONG		m_Size;					//in blocks
	GUID		m_Guid;
	UCHAR		m_Reserved[16];
} VOLUME_INFO, *PVOLUME_INFO;



typedef struct	_MAPPING_INFO
{
	LUN_DESCRIPTOR	m_LunDescriptor;
	VOLUME_INFO		m_VolumeInfo;
	ULONG			m_Flag;
	ULONG			m_MappingHandle;
	OSNWWN			m_ServerWwn;							//Server WWN 
	WCHAR			m_VVName[MAX_DEVICE_NAME_LENGTH];		//virtual volume name                      
} MAPPING_INFO, *PMAPPING_INFO;

typedef struct	_MAPPING_INFO_EX
{
	LUN_DESCRIPTOR	m_LunDescriptor;
	VOLUME_INFO		m_VolumeInfo;
	ULONG			m_Flag;
	ULONG			m_MappingHandle;
	OSNWWN			m_ServerWwn;							//Server WWN 
	WCHAR			m_VVName[MAX_DEVICE_NAME_LENGTH];		//virtual volume name
	USHORT			m_ServerId;
	USHORT			m_PortId;
} MAPPING_INFO_EX, *PMAPPING_INFO_EX;

typedef struct _APPSERVER_INFO
{
	WCHAR   m_Name[MAX_DEVICE_NAME_LENGTH];  // App Name
	OSNWWN  m_WWN;                                 // Reserved
	ULONG   m_OSType;                              
}APPSERVER_INFO,*PAPPSERVER_INFO;

typedef struct _APPSERVER_LIST
{
	ULONG m_Size;
    APPSERVER_INFO m_Info[1];
}APPSERVER_LIST,*PAPPSERVER_LIST;

typedef struct _CHANNEL_INFO
{
	WCHAR   m_HostName[MAX_DEVICE_NAME_LENGTH];       // host Name
	WCHAR   m_ChannelName[MAX_DEVICE_NAME_LENGTH];  // channel name
    OSNWWN  m_ChannelWWN;                           // channel WWN
	USHORT		m_ChannelIndex;
}CHANNEL_INFO,*PCHANNEL_INFO;

typedef struct _CHANNEL_INFO_LIST
{
	ULONG        m_Size;
	CHANNEL_INFO m_Info[1];
}CHANNEL_INFO_LIST,*PCHANNEL_INFO_LIST;

//IOCTL between GUI and iSCSI Target
#define OSN_MAKE_IOCTL(t,c)\
        (ULONG)CTL_CODE((t), 0x800+(c), METHOD_BUFFERED, FILE_ANY_ACCESS)

#define OSNISCSI_DEVICE_TYPE						0x8000

//IN: None. OUT: OSN_ISCSI_PORT_LIST
#define IOCTL_OSNISCSI_GET_TARGET_PORTLIST			OSN_MAKE_IOCTL(OSNISCSI_DEVICE_TYPE,10)

//IN: _OSN_ISCSI_PORT_INFO. OUT: OSN_ISCSI_PORT_LIST
#define IOCTL_OSNISCSI_GET_INITIATOR_PORTLIST		OSN_MAKE_IOCTL(OSNISCSI_DEVICE_TYPE,11)

//IN: _OSN_ISCSI_PORT_INFO. OUT: _OSN_ISCSI_PORT_INFO
#define IOCTL_OSNISCSI_GET_PORT_INFO				OSN_MAKE_IOCTL(OSNISCSI_DEVICE_TYPE,12)


//IN: MAPPING_INFO OUT: NONE
#define IOCTL_OSNISCSI_UPDATE_MAPPING				OSN_MAKE_IOCTL(OSNISCSI_DEVICE_TYPE,13)


/////////////////////////////////////////////////////////////////////////////////////////////
//IOCTL between GUI and Cfg Manager
#define OSNCFG_DEVICE_TYPE							0x8100



#define IOCTL_OSNCFG_ADD_MAPPING					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,100)	//IN: MAPPING_INFO. OUT: None
#define IOCTL_OSNCFG_REMOVE_MAPPING					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,101)	//IN: MAPPING_INFO. OUT: None
#define IOCTL_OSNCFG_CLEAR_ALL_MAPPING				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,102)

#define IOCTL_OSNCFG_ADD_APPSERVER                  OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,114)
#define IOCTL_OSNCFG_ADD_CHANNEL                    OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,115)
#define IOCTL_OSNCFG_DELETE_APPSERVER               OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,116)
#define IOCTL_OSNCFG_DELETE_CHANNEL                 OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,117)
#define IOCTL_OSNCFG_ADD_REMOTEMAPPING	OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,118)
#define IOCTL_OSNCFG_REMOVE_REMOTEMAPPING		OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,119)

//definition related to HA
typedef struct  _HAMIRROR_INFO
{
	WCHAR       m_PSName[MAX_DEVICE_NAME_LENGTH];		//PS - Primary Server
	GUID		m_PVGuid;								//PV - Primary Volume
	WCHAR       m_SSName[MAX_DEVICE_NAME_LENGTH];		//SS - Secondary Server
	GUID		m_SVGuid;								//SV - Secondary Volume
	ULONGLONG		m_BlockSize;							//block size of min(m_PVGuid, m_SVGuid);
	ULONG		m_Flag;									//VOLUME_CONFIG_FLAGS_STD_MIR etc.
	ULONG       m_RecoveryMode;                         // Primary->Secondary,Secondary->Primary;
} HAMIRROR_INFO, *pHAMIRROR_INFO;

#define IOCTL_OSNCFG_ADD_MIRROR						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,104)
#define IOCTL_OSNCFG_REMOVE_MIRROR					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,105)

#define IOCTL_OSNCFG_ADD_VOLUME						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,106)	//IN: VOLUME_INFO
#define IOCTL_OSNCFG_DELETE_VOLUME					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,107)	//IN: VOLUME_INFO

typedef struct  _SERVER_INFO
{
	WCHAR       m_Name[MAX_DEVICE_NAME_LENGTH];			//Server Name
	OSNWWN		m_OSNWWN;								//Server OSNWWN
	ULONG		m_IPAddress;							//Server IP Address
	ULONG		m_LocalIPAddress;						//local server IP address
	USHORT		m_ServerIndex;
} SERVER_INFO, *pSERVER_INFO;

typedef struct _SERVER_INFO_LIST
{
	ULONG m_Size;
	SERVER_INFO m_ServerInfo[1];
}SERVER_INFO_LIST,*PSERVER_INFO_LIST;

#define IOCTL_OSNCFG_ADD_SERVER						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,108)	//IN: SERVER_INFO
#define IOCTL_OSNCFG_REMOVE_SERVER					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,109)	//IN: SERVER_INFO








#define VOLUME_CONFIG_STATE_GOOD					1
#define VOLUME_CONFIG_STATE_NOT_AVAILABLE			2

typedef struct _VOLUME_CONFIG_INFO
{
	CHAR				m_VolumeName[MAX_DEVICE_NAME_LENGTH];
	OSNWWN				m_NodeWwn;
	ULONG				m_State;
}VOLUME_CONFIG_INFO;

# define OSNCFG_SINGLE_VOLUME	1
# define OSNCFG_DP_VOLUME			2
# define OSNCFG_HA_VOLUME			4

#define VOLUME_CONFIG_FLAGS_STD_MIR					1
#define VOLUME_CONFIG_FLAGS_AP						2
#define VOLUME_CONFIG_FLAGS_TPAP					4
#define VOLUME_CONFIG_FLAGS_READONLY				8
#define VOLUME_CONFIG_FLAGS_MPIO                    32
#define VOLUME_CONFIG_FLAGS_INTER_MIR				16		//the link is an internal mirror link
#define VOLUME_CONFIG_FLAGS_PRIMARY					64
#define VOLUME_CONFIG_FLAGS_LN						128
#define VOLUME_CONFIG_FLAG_PASSTHOUGH				256   
#define VOLUME_CONFIG_FLAGS_CP						512  

#define VOLUME_MAPPING_READONLY						VOLUME_CONFIG_FLAGS_READONLY

typedef struct _VOLUME_CONFIG_LIST
{
	ULONG				m_Count:8;					//max is 2, we only support primary and secondary
	ULONG				m_CurrentIndex:8;			//current path
	ULONG				m_SwitchPath:8;				//the desired path
	ULONG				reserve:8;					//not used
	ULONG				m_Flags;					//flags for mirror settings
	VOLUME_CONFIG_INFO	m_list[2];
}VOLUME_CONFIG_LIST;

typedef struct _VOLUME_EXTEND_INQUIRY
{
	ULONG				m_Flags;
	VOLUME_CONFIG_INFO  m_VolumeCfgInfo;
}VOLUME_EXTEND_INQUIRY;

typedef struct _VOLUME_RESIZE_INFO
{
	GUID				m_VolumeId;
	GUID				m_VolumeGroupId;
	ULONGLONG	m_SizeInBlocks;
	BOOLEAN		m_AllocateFlag; // resize is true,update is false
	ULONG			m_Reserved;
}VOLUME_RESIZE_INFO,*PVOLUME_RESIZE_INFO;

typedef struct _SET_PARTNER_VOLUME_INFO
{
	char   m_TargetName[OSN_MAX_HOSTNAME];
	VOLUMEID  m_SrcVolumeId;
	VOLUMEID	 m_PartnerVolumeId;
} SET_PARTNER_VOLUME_INFO,*PSET_PARTNER_VOLUME_INFO;

//Communication between iSCSI Target and Cfg Manager, through IRP_MJ_INTERNAL_DEVICE_CONTROL
#define IOCTL_OSNCFG_REPORT_LUN						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,150)	//IN: PORT_SESSION. OUT: TReportLunsList
#define IOCTL_OSNCFG_GET_LUN_INFO					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,151)  //IN: LUN_DESCRIPTOR. OUT: MAPPING_INFO
#define IOCTL_OSNCFG_GET_INITIATOR_OSTYPE			OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,152)  //IN: Initiator OWNWWN. OUT: ULONG

//Return the ccfg info VOLUME_CONFIG_LIST of VV. Called from initiator to get the v config
#define IOCTL_OSNCFG_GET_VOLUME_CONFIGURATION		OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,153)	//IN: None. OUT: VOLUME_CONFIG_LIST

//The ioctl will be passed down to HA to decide if the target lun can be opened
#define IOCTL_OSNCFG_VOLUME_QUERY_OPEN				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,113)

/////////////////////////////////////////////////////////////////////////////////////////////


//
//we will passthrough IO if the IO is from loopback device
//this is normally used by NAS device, SS target ...
//
#define LOOPBACK_PASSTHROUGH_HANDLE 0x12344321

#define IOCTL_OSNCFG_VOLUME_PR_IN					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,154)
#define IOCTL_OSNCFG_VOLUME_PR_OUT					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,155)

#define IOCTL_OSNCFG_SS_MARKER						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,156)	
#define IOCTL_OSNCFG_CDP_MARKER						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,157)	
#define IOCTL_OSNCFG_CDP_MARKER_MIRROR				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,158)	
#define IOCTL_OSNCFG_RC_TIME_MARKER					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,159)
#define IOCTL_OSNCFG_RESIZE_VOLUME					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,161)
#define IOCTL_OSNCFG_SET_PARTNER_VOLUME				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,163)
#define IOCTL_OSNCFG_REMOVE_PARTNER_VOLUME			OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,166)
#define IOCTL_OSNCFG_ACTIVATE_VOLUME				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,164)
#define IOCTL_OSNCFG_QUERY_VOLUME					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,165)
#define IOCTL_OSNCFG_HACDP_MARKER					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,167)
#define IOCTL_OSNCFG_HASNAP_MARKER					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,168)

#define IOCTL_OSNCFG_CHECK_RESERVATION_CONFLICT		OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,169)

#define IOCTL_OSNCFG_READ_CAPACITY					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,170)

#define IOCTL_OSNCFG_VOLUME_RTPG					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,172)

#define IOCTL_OSNCFG_GET_VOLUME_SIZE				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,173)

#define IOCTL_OSNCFG_GET_VOLUME_STATE				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,174)
#define IOCTL_OSNCFG_GET_VOLUME_STATE_EX			OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,175)

#define IOCTL_OSNCFG_GET_LUN_INFO_EX				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,176)  //IN: LUN_DESCRIPTOR. OUT: MAPPING_INFO_EX

#define IOCTL_OSNCFG_ENABLE_WRITE_PROTECT			OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,177)
#define IOCTL_OSNCFG_DISABLE_WRITE_PROTECT			OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,178)

#define IOCTL_OSNCFG_MAKE_DM_RO						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,179)  
#define IOCTL_OSNCFG_MAKE_DM_RW						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,180)  

#define IOCTL_OSNCFG_ARB_VOLUME_RW					OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,181)

#define IOCTL_OSNCFG_GET_TVM_PT						OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,182)

#define IOCTL_OSNCFG_FIX_READONLY_FLAG				OSN_MAKE_IOCTL(OSNCFG_DEVICE_TYPE,183)

#endif	//_CFG_COMMON_H_
